import flash.external.ExternalInterface;import com.google.Tracer;class com.google.Bridge extends MovieClip {  // The lcJs object stores a listening LocalConnection for each SWF on the page.  // These connections carry messages intentded for JavaScript code.  private var lcJs;  // We only need one LocalConnection for sending.  private var lcAs;    // t.appendr instance for debug  private var t;  function as(channel, id, methodName, argv) {    t.append(        "sending {id: " + id +         ",\n  methodName: " + methodName +         ",\n  argv: " + argv +         "}\n  on channel " + channel + "as");    var f = function (lcAs, t) {      return function () {        if (!lcAs.send(channel + "as", "as", id, methodName, argv)) {          t.append(".");          _global.setTimeout(f(lcAs, t), 100);        } else {          t.append( "success");        }      };    };        _global.setTimeout(f(lcAs, t), 100);  };    function registerChannel(channel) {    lcJs[channel] = new LocalConnection;    lcJs[channel].connect(channel + "js");    t.append("bridge listening on " + channel + "js");    var jsMaker = function (lcAs, t) {      return function(id, functionName, argv) {        var result = ExternalInterface.call("bridge___.js", functionName, argv);        t.append("returning {id: " + id + ",\n  result: " + result + "}\n  on channel " + channel + "as");        lcAs.send(channel + "as", "jsResult", id, result);      };    };        var asResultMaker = function (t) {      return function(id, result) {        t.append("returning {id: " + id + ",\n  result: " + result + "}\n  via ExternalInterface:" +					  ExternalInterface.call("bridge___.asResult", [id, result]));      };    }        lcJs[channel].js = jsMaker(lcAs, t);    lcJs[channel].asResult = asResultMaker(t);  }  // Fires when the movie loads    function onLoad() {    t = new Tracer();    t.append("Bridge: onLoad");      lcJs = {};    lcAs = new LocalConnection();        t.append("adding registerChannel: " +         ExternalInterface.addCallback("registerChannel", this, registerChannel));    t.append("adding as: " + ExternalInterface.addCallback("as", this, as));  }  }