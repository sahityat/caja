import org.waterken.ref_send;import com.google.Tracer;class com.google.ExternalInterfaceMaker {  private var Q;  private var callbacks = [];  private var lcAs;  private var lcJs;  private var bridge = { table: [] };    // Tracer instance  private var t;    function addCallback(methodName, instance, method) {     t.append("EI: adding callback " + methodName + ": " + method);    callbacks[methodName] = function (argv) {       return method.call(instance, argv);     };  };  function call(functionName, argv) {    var r = Q.defer();    var id = bridge.table.length;    bridge.table[id] = r.resolve;    t.append("EI: storing " + r.resolve + " in table entry " + id);        var f = function (lcJs, t) {      return function () {        if (lcJs.send(_root.cajaChannel + "js", "js", id, functionName, argv)) {            t.append("EI: send on channel " + _root.cajaChannel + "js succeeded");        } else {            _global.setTimeout(f(lcJs, t), 100);        }      };    };    _global.setTimeout(f(lcJs, t), 100);    return r.promise;  };    function ExternalInterfaceMaker(tracer) {    t = tracer;    Q = ref_send.qMaker();    lcAs = new LocalConnection();    lcAs.connect(_root.cajaChannel + "as");        t.append("EI: listening to channel " + _root.cajaChannel + "as");        var asMaker = function (lcJs, t, callbacks) {      return function (id, methodName, argv) {        t.append("EI: in lcAs.as, got {id: " + id + "\n  methodName: " + methodName + "\n  argv: " + argv + "}");        t.append("EI: callbacks." + methodName + " = " + callbacks[methodName]);        var result = callbacks[methodName](argv);        t.append("EI: returning { id: " + id + ",\n  result: " + result + "}\n  on channel " + _root.cajaChannel + "js");          var f = function (lcJs, t) {          return function () {            if (!lcJs.send(_root.cajaChannel + "js", "asResult", id, result)) {              t.append("EI: trying to send on " + _root.cajaChannel + "js on lcJs " + lcJs + "...");              _global.setTimeout(f(lcJs, t), 100);            } else {              t.append("EI: successfully sent {id: " + id + ", result: " + result + "} to asResult");            }          };        };                _global.setTimeout(f(lcJs, t), 100);      };    };        var jsResultMaker = function(bridge, t) {      return function(id, result) {        t.append("EI: jsResult got " + id + ", " + result);        t.append("    and called " + bridge.table[id]);        bridge.table[id](result);      };    };        lcJs = new LocalConnection();    lcAs.as = asMaker(lcJs, t, callbacks);    lcAs.jsResult = jsResultMaker(bridge, t);    t.append("EI: sending on channel " + _root.cajaChannel + "js");  }}