import com.google.ExternalInterfaceMaker;import org.waterken.ref_send;import com.google.Tracer;class com.example.Boxed extends MovieClip {  private var Q;  private var ExternalInterface;  // Tracer instance for debug  private var t;  function pickle(obj) {    var t = typeof obj, str, i, len;    if (t === 'number' || t === 'boolean') { return "" + obj; }    if (t === 'string') {      return "\"" + obj + "\"";    }    if (obj instanceof Array) {      str = "[ ";      len = obj.length;      for(i = 0; i < len; ++i) {        str += pickle(obj[i]) + ((i < len-1) ? ", " : " ]");      }      return str;    }    str = "{ ";    for (i in obj) {      str += i + ": " + pickle(obj[i]) + ", ";    }    str += "}";    return str;  }    function onLoad() {    // for debug    t = new Tracer();    t.append("Boxed:in onLoad");    Q = ref_send.qMaker();    ExternalInterface = new ExternalInterfaceMaker(t);    var testMaker = function (pickle, t) {      return function(argv) {        t.append("Boxed: In test");        return "test: I saw " + pickle(argv);      };    };    ExternalInterface.addCallback('test', null, testMaker(pickle, t));        var result_ = ExternalInterface.call('hello', 4);      Q.when(result_,       function(value) {        t.append("Boxed: alerter sent back " + value);      },      function(reason) {        t.append("Boxed: failed: " + reason);      });    t.append("Boxed: finished onLoad");  }}