Index: features/src/main/javascript/features/opensocial-reference/container.js
===================================================================
--- features/src/main/javascript/features/opensocial-reference/container.js	(revision 776855)
+++ features/src/main/javascript/features/opensocial-reference/container.js	(working copy)
@@ -557,10 +557,97 @@
 
   flash: {
     embedFlash: function(orig) {
-      return ___.frozenFunc(function tamedEmbedFlash(swfUrl, swfContainer,
-						     swfVersion, opt_params) {
-	return orig.call(this, swfUrl, swfContainer.node___, swfVersion,
-			 opt_params);
+      var cleanse = (function () {
+        // Gets a fresh Array and Object constructor that 
+        // doesn't have the caja properties on it.  This is 
+        // important for passing objects across the boundary 
+        // to flash code.
+        var ifr = document.createElement("iframe");
+        ifr.width = 1; ifr.height = 1; ifr.border = 0;
+        document.body.appendChild(ifr);
+        var A = ifr.contentWindow.Array;
+        var O = ifr.contentWindow.Object;
+        document.body.removeChild(ifr);
+        
+        var c = function(obj) {
+          var t = typeof obj, i;
+          if (t === 'number' || t === 'boolean' || t === 'string') { return obj; }
+          if (t === 'object') {
+            var o;
+            if (obj instanceof Array) { o = new A; }
+            else if (obj instanceof Object) { o = new O; }
+            for (i in obj) {
+              if (/__$/.test(i)) { continue; }
+              o[i] = c(obj[i]);
+            }
+            return o;
+          }
+          return (void 0);
+        };
+        
+        return c;
+      })();
+      
+      return ___.frozenFunc(function tamedEmbedFlash(
+          swfUrl, 
+          swfContainer,
+          swfVersion, 
+          opt_params) {
+        // Check that swfContainer is a wrapped node
+        if (typeof swfContainer === "string") {
+          swfContainer = $v.cm(
+              $v.ro("document"), 
+              "getElementById", 
+              [swfContainer]);
+        } else if (typeof swfContainer !== "object" || !swfContainer.node___) {
+          return false;
+        }
+
+        // Generate a random number for use as the channel name
+        // for communication between the bridge and the contained
+        // flash object.
+        var channel = "flash" + ("" + Math.random()).substring(2);
+        
+        // Strip out allowNetworking and allowScriptAccess, 
+        //   as well as any caja-specific properties.
+        var new_params = {};
+        for (i in opt_params) {
+          if (i.match(/___$/)) { continue; }
+          var ilc = i.toLowerCase();
+          if (ilc === "allownetworking" || ilc === "allowscriptaccess") {
+            continue;
+          }
+          var topi = typeof opt_params[i];
+          if (topi !== "string" && topi !== "number") { continue; }
+          new_params[i] = opt_params[i];
+        }
+        new_params.allowNetworking = "never";
+        new_params.allowScriptAccess = "none";
+        if (!new_params.flashVars) { new_params.flashVars = ""; }
+        new_params.flashVars += "&cajaChannel=" + channel;
+
+        // Load the flash.
+        orig.call(
+            this, 
+            swfUrl, 
+            swfContainer.node___, 
+            9,
+            new_params);
+
+        setTimeout(function f(){ 
+          try{ bridge___.registerChannel(channel); } 
+          catch(e) { setTimeout(f, 0); }
+        }, 0);
+        
+        // Return a proxy for the flash object.
+        return ___.func(function(op, callback, methodName, argv) {
+          if (op !== 'POST') {
+            throw new Error("This promise only supports the POST operation.");
+          }
+          var id = bridge___.table.length;
+          bridge___.table[id] = callback;
+          bridge___.as(channel, id, methodName, cleanse(argv));
+        });
       });
     }
   },
@@ -686,7 +773,8 @@
   cajita = window["cajita"];
   valijaMaker = window["valijaMaker"];
   attachDocumentStub = window["attachDocumentStub"];
-
+  bridge___ = window["bridge___"];
+  
   var imports = ___.copy(___.sharedImports);
   imports.outers = imports;
 
@@ -706,22 +794,53 @@
   ___.getNewModuleHandler().setImports(imports);
 
   // Taming
-  if (gadgets.flash)
+  if (gadgets.flash) {
+    var d = document.createElement('div');
+    d.appendChild(document.createTextNode("bridge"));
+    document.body.appendChild(d);
+    
+    var swfName = "/Both/Bridge.swf";
+    d.innerHTML = '<object data="' + swfName + 
+        '" type="application/x-shockwave-flash" ' +
+        'width="600" height="300" id="bridge___">' +
+        '<param name="movie" value="' + swfName + '">' +
+        '<param name="allowNetworking" value="always">' +
+        '<param name="allowScriptAccess" value="all"></object>';
+    bridge___ = d.childNodes[0];
+    bridge___.table = [];
+    bridge___.asResult = function(info) {
+      bridge___.table[info[0]].call(cajita.USELESS, info[1]);
+      bridge___.table[info[0]] = undefined;
+      return true;
+    };
+    bridge___.js = function (functionName, argv) {
+      alert("called bridge___.js");
+      // This assumes that there's a single gadget in the frame.
+      var $v = ___.getNewModuleHandler().getImports().$v;
+      return $v.cf($v.ro(functionName), [argv]);
+    }
+
     gadgets.flash.embedFlash
-      = taming.flash.embedFlash(gadgets.flash.embedFlash);
+        = taming.flash.embedFlash(gadgets.flash.embedFlash);
+  }
   gadgets.util.registerOnLoadHandler
-    = taming.util.registerOnLoadHandler(imports.$v,
-					gadgets.util.registerOnLoadHandler);
-  if (gadgets.views)
+      = taming.util.registerOnLoadHandler(
+          imports.$v,
+          gadgets.util.registerOnLoadHandler);
+  if (gadgets.views) {
     gadgets.views.getCurrentView
       = taming.views.getCurrentView(gadgets.views.getCurrentView);
-  opensocial.newDataRequest = taming.newDataRequest(imports.$v,
-						    opensocial.newDataRequest);
-  if (gadgets.MiniMessage)
+  }
+  opensocial.newDataRequest = taming.newDataRequest(
+      imports.$v,
+      opensocial.newDataRequest);
+  if (gadgets.MiniMessage) {
     gadgets.MiniMessage = taming.MiniMessage(imports.$v);
-  if (gadgets.TabSet)
+  }
+  if (gadgets.TabSet) {
     gadgets.TabSet = taming.TabSet(imports.$v, gadgets.TabSet);
-
+  }
+  
   // Add the opensocial APIs and mark them callable and readable.
   imports.outers.gadgets = gadgets;
   imports.outers.opensocial = opensocial;
Index: features/src/main/javascript/features/flash/flash.js
===================================================================
--- features/src/main/javascript/features/flash/flash.js	(revision 776855)
+++ features/src/main/javascript/features/flash/flash.js	(working copy)
@@ -119,7 +119,10 @@
       }
       // Set the default "base" attribute
       if (typeof opt_params.base !== 'string') {
-        opt_params.base = swfUrl.match(/^[^?#]+\//)[0];
+        var a = document.createElement('a');
+        a.href = swfUrl;
+        // Get the part up to the last slash
+        opt_params.base = a.href.match(/^(.*\/)[^/]*$/)[1];
       }
       // Set wmode to "opaque" if it's not defined. The default value
       // "window" is undesirable because browsers will render Flash
@@ -143,7 +146,7 @@
 
         html = '<embed';
         for (var prop in opt_params) {
-          if (!/^swf_/.test(prop)) {
+          if (!/^swf_/.test(prop) && !/___$/.test(prop)) {
             html += ' ' + prop + '="' + opt_params[prop] + '"';
           }
         }
@@ -160,13 +163,15 @@
           attr.id = opt_params.id;
         }
 
-        html = '<object';
+        html = '<object data="' + swfUrl + '" ';
         for (var attrProp in attr) {
-          html += ' ' + attrProp + '="' + attr[attrProp] + '"';
+          if (!/___$/.test(attrProp)) {
+            html += ' ' + attrProp + '="' + attr[attrProp] + '"';
+          }
         }
         html += '>';
         for (var paramsProp in opt_params) {
-          if (!/^swf_/.test(paramsProp) && !attr[paramsProp]) {
+          if (!/^swf_/.test(paramsProp) && !attr[paramsProp] && !/___$/.test(paramsProp)) {
             html += '<param name="' + paramsProp +
               '" value="' + opt_params[paramsProp] + '" />';
           }
